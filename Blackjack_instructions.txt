Assignment: Blackjack Game Instructions

This assignment is intentionally quite large; there's no other way to learn how to put everything you've been learning together. If you've never done this before, seeing an assignment like this can be quite daunting. But just like the calculator application, this program can be tackled step by step. The trick is to think about the logical steps required, outside of Ruby or programming, and then use code to test to see if your logic is sound.

Some hints:

first, try using pseudo code; that's using English to write out the logic, and not trying to use code. Start with a high-level logic flow, using only English.
next, try to replace the logic with Ruby. If you run into syntax errors, use Google or other resources to figure out the Ruby syntax for the logical construct. These types of issues are easiest to solve. And since you have your pseudo code, you won't lose your train of thought on the logical progression of your program.
as you run your code and seeing that it works, progressively drill down into the details, again, first using pseudo code, then after you've figured out the logic in English, then replacing that with actual Ruby to see if your logic was correct.
The most frustrating part about programming in the beginning is not knowing if the problem you're encountering is due to faulty logic or due to syntax. Your brain has a hard to oscillating between those two layers, because analyzing the logic requires that you stay at that layer for a while to chew on the problem a bit. But not knowing Ruby syntax well prevents deep concentration at the logic layer. That's where using pseudo code can be very helpful.

Rules & Requirements:

Blackjack is a card game where you calculate the sum of the values of your cards and try to hit 21, aka "blackjack". Both the player and dealer are dealt two cards to start the game. All face cards are worth whatever numerical value they show. Suit cards are worth 10. Aces can be worth either 11 or 1. Example: if you have a Jack and an Ace, then you have hit "blackjack", as it adds up to 21.

After being dealt the initial 2 cards, the player goes first and can choose to either "hit" or "stay". Hitting means deal another card. If the player's cards sum up to be greater than 21, the player has "busted" and lost. If the sum is 21, then the player wins. If the sum is less than 21, then the player can choose to "hit" or "stay" again. If the player "hits", then repeat above, but if the player stays, then the player's total value is saved, and the turn moves to the dealer.

By rule, the dealer must hit until she has at least 17. If the dealer busts, then the player wins. If the dealer, hits 21, then the dealer wins. If, however, the dealer stays, then we compare the sums of the two hands between the player and dealer; higher value wins.

Here is a Youtube video that covers some of the basics. We won't be dealing with more advanced gameplay, like splitting, doubling down, etc (though some previous students have implemented this as well!).

http://www.youtube.com/watch?v=xg_WX6Cj0FA

Hints:
1. Think of the data structure required to keep track of cards in a deck. 
2. You'll need to look up and use a "while" loop, since there could be an indeterminate number of "hits" by both the player and dealer. "while" loops are used when we don't have a finite number of iterations.
3. Code something. Get started, even if it's just capturing the player's name. Give it an honest attempt before looking at solutions.
4. Use methods to extract the piece of functionality that calculates the total, since we need it throughout the program.

Bonus:
1. Save the player's name, and use it throughout the app.
2. Ask the player if he wants to play again, rather than just exiting.
3. Save not just the card value, but also the suit. 
4. Use multiple decks to prevent against card counting players.